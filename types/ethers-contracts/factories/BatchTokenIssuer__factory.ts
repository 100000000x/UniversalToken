/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BatchTokenIssuer,
  BatchTokenIssuerInterface,
} from "../BatchTokenIssuer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canImplementInterfaceForAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "partitions",
        type: "bytes32[]",
      },
      {
        internalType: "address[]",
        name: "tokenHolders",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "batchIssueByPartition",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061004c6040518060400160405280601081526020016f2130ba31b42a37b5b2b724b9b9bab2b960811b81525061005160201b6103931760201c565b6100d9565b600160008083604051602001610067919061009e565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b6000825160005b818110156100bf57602081860181015185830152016100a5565b818111156100ce576000828501525b509190910192915050565b610655806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063249cb3fa1461003b578063edec7e1514610061575b600080fd5b61004e610049366004610535565b610081565b6040519081526020015b60405180910390f35b61007461006f366004610469565b6100e2565b604051610058919061059c565b60008281526020819052604081205460ff16156100d85760405173455243313832305f4143434550545f4d4147494360601b60208201526034016040516020818303038152906040528051906020012090506100dc565b5060005b92915050565b6040516355138f0d60e11b815233600482015260609088906001600160a01b0382169063aa271e1a9060240160206040518083038186803b15801561012657600080fd5b505afa15801561013a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015e9190610513565b6101af5760405162461bcd60e51b815260206004820152601d60248201527f53656e646572206973206e6f74206120746f6b656e206d696e7465722e00000060448201526064015b60405180910390fd5b8685146102205760405162461bcd60e51b815260206004820152603960248201527f706172746974696f6e7320616e6420746f6b656e486f6c6465727320617272616044820152787973206861766520646966666572656e74206c656e6774687360381b60648201526084016101a6565b86831461028b5760405162461bcd60e51b815260206004820152603360248201527f706172746974696f6e7320616e642076616c75657320617272617973206861766044820152726520646966666572656e74206c656e6774687360681b60648201526084016101a6565b60005b8781101561038657896001600160a01b03166367c849198a8a848181106102b7576102b7610609565b905060200201358989858181106102d0576102d0610609565b90506020020160208101906102e59190610447565b8888868181106102f7576102f7610609565b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b03909316602485015250602090910201356044820152608060648201526000608482015260a401600060405180830381600087803b15801561035b57600080fd5b505af115801561036f573d6000803e3d6000fd5b50505050808061037e906105e0565b91505061028e565b5050979650505050505050565b6001600080836040516020016103a99190610561565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b80356001600160a01b03811681146103f757600080fd5b919050565b60008083601f84011261040e57600080fd5b5081356001600160401b0381111561042557600080fd5b6020830191508360208260051b850101111561044057600080fd5b9250929050565b60006020828403121561045957600080fd5b610462826103e0565b9392505050565b60008060008060008060006080888a03121561048457600080fd5b61048d886103e0565b965060208801356001600160401b03808211156104a957600080fd5b6104b58b838c016103fc565b909850965060408a01359150808211156104ce57600080fd5b6104da8b838c016103fc565b909650945060608a01359150808211156104f357600080fd5b506105008a828b016103fc565b989b979a50959850939692959293505050565b60006020828403121561052557600080fd5b8151801515811461046257600080fd5b6000806040838503121561054857600080fd5b82359150610558602084016103e0565b90509250929050565b6000825160005b818110156105825760208186018101518583015201610568565b81811115610591576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156105d4578351835292840192918401916001016105b8565b50909695505050505050565b600060001982141561060257634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea264697066735822122086b266edbe65160d2f59f89d007847286f520a7ef74e9c3234de9d810e13674264736f6c63430008070033";

type BatchTokenIssuerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchTokenIssuerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchTokenIssuer__factory extends ContractFactory {
  constructor(...args: BatchTokenIssuerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BatchTokenIssuer> {
    return super.deploy(overrides || {}) as Promise<BatchTokenIssuer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BatchTokenIssuer {
    return super.attach(address) as BatchTokenIssuer;
  }
  connect(signer: Signer): BatchTokenIssuer__factory {
    return super.connect(signer) as BatchTokenIssuer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchTokenIssuerInterface {
    return new utils.Interface(_abi) as BatchTokenIssuerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchTokenIssuer {
    return new Contract(address, _abi, signerOrProvider) as BatchTokenIssuer;
  }
}
