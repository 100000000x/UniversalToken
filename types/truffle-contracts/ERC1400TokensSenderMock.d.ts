/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ERC1400TokensSenderMockContract
  extends Truffle.Contract<ERC1400TokensSenderMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ERC1400TokensSenderMockInstance>;
}

type AllEvents = never;

export interface ERC1400TokensSenderMockInstance
  extends Truffle.ContractInstance {
  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  canTransfer(
    arg0: string,
    arg1: string,
    arg2: string,
    from: string,
    to: string,
    value: number | BN | string,
    data: string,
    arg7: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  tokensToTransfer: {
    (
      arg0: string,
      arg1: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      arg7: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      arg7: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      arg7: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      arg7: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    canTransfer(
      arg0: string,
      arg1: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      arg7: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    tokensToTransfer: {
      (
        arg0: string,
        arg1: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        arg7: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        arg7: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        arg7: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        arg7: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
