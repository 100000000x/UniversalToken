/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ERC1400TokensValidatorMockContract
  extends Truffle.Contract<ERC1400TokensValidatorMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ERC1400TokensValidatorMockInstance>;
}

export interface AllowlistAdminAdded {
  name: "AllowlistAdminAdded";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface AllowlistAdminRemoved {
  name: "AllowlistAdminRemoved";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface AllowlistedAdded {
  name: "AllowlistedAdded";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface AllowlistedRemoved {
  name: "AllowlistedRemoved";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface BlocklistAdminAdded {
  name: "BlocklistAdminAdded";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface BlocklistAdminRemoved {
  name: "BlocklistAdminRemoved";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface BlocklistedAdded {
  name: "BlocklistedAdded";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface BlocklistedRemoved {
  name: "BlocklistedRemoved";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface CertificateSignerAdded {
  name: "CertificateSignerAdded";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface CertificateSignerRemoved {
  name: "CertificateSignerRemoved";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface HoldCreated {
  name: "HoldCreated";
  args: {
    token: string;
    holdId: string;
    partition: string;
    sender: string;
    recipient: string;
    notary: string;
    value: BN;
    expiration: BN;
    secretHash: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: BN;
    7: BN;
    8: string;
  };
}

export interface HoldExecuted {
  name: "HoldExecuted";
  args: {
    token: string;
    holdId: string;
    notary: string;
    heldValue: BN;
    transferredValue: BN;
    secret: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
  };
}

export interface HoldExecutedAndKeptOpen {
  name: "HoldExecutedAndKeptOpen";
  args: {
    token: string;
    holdId: string;
    notary: string;
    heldValue: BN;
    transferredValue: BN;
    secret: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
  };
}

export interface HoldReleased {
  name: "HoldReleased";
  args: {
    token: string;
    holdId: string;
    notary: string;
    status: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

export interface HoldRenewed {
  name: "HoldRenewed";
  args: {
    token: string;
    holdId: string;
    notary: string;
    oldExpiration: BN;
    newExpiration: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface PauserAdded {
  name: "PauserAdded";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface PauserRemoved {
  name: "PauserRemoved";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    token: string;
    account: string;
    0: string;
    1: string;
  };
}

type AllEvents =
  | AllowlistAdminAdded
  | AllowlistAdminRemoved
  | AllowlistedAdded
  | AllowlistedRemoved
  | BlocklistAdminAdded
  | BlocklistAdminRemoved
  | BlocklistedAdded
  | BlocklistedRemoved
  | CertificateSignerAdded
  | CertificateSignerRemoved
  | HoldCreated
  | HoldExecuted
  | HoldExecutedAndKeptOpen
  | HoldReleased
  | HoldRenewed
  | Paused
  | PauserAdded
  | PauserRemoved
  | Unpaused;

export interface ERC1400TokensValidatorMockInstance
  extends Truffle.ContractInstance {
  addAllowlistAdmin: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addAllowlisted: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addBlocklistAdmin: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addBlocklisted: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addCertificateSigner: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addPauser: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get balance on hold of a tokenholder.
   */
  balanceOnHold(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get balance on hold of a tokenholder for a specific partition.
   */
  balanceOnHoldByPartition(
    token: string,
    partition: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  canValidate(
    data: {
      token: string;
      payload: string;
      partition: string;
      operator: string;
      from: string;
      to: string;
      value: number | BN | string;
      data: string;
      operatorData: string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Execute hold.
   */
  executeHold: {
    (
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Execute hold and keep open.
   */
  executeHoldAndKeepOpen: {
    (
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      value: number | BN | string,
      secret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get granularity for a given partition.
   * @param partition Name of the partition.
   * @param token Token address.
   */
  granularityByPartition(
    token: string,
    partition: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Create a new token hold.
   */
  hold: {
    (
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Create a new token hold on behalf of the token holder.
   */
  holdFrom: {
    (
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Create a new token hold with expiration date on behalf of the token holder.
   */
  holdFromWithExpirationDate: {
    (
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      sender: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Create a new token hold with expiration date.
   */
  holdWithExpirationDate: {
    (
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAllowlistAdmin(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isAllowlisted(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isBlocklistAdmin(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isBlocklisted(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isCertificateSigner(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isPauser(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * called by the owner to pause, triggers stopped state
   */
  pause: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   */
  paused(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Create a new token pre-hold.
   */
  preHoldFor: {
    (
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      timeToExpiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Create a new token pre-hold with expiration date.
   */
  preHoldForWithExpirationDate: {
    (
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      recipient: string,
      notary: string,
      partition: string,
      value: number | BN | string,
      expiration: number | BN | string,
      secretHash: string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Register token setup.
   */
  registerTokenSetup: {
    (
      token: string,
      certificateActivated: number | BN | string,
      allowlistActivated: boolean,
      blocklistActivated: boolean,
      granularityByPartitionActivated: boolean,
      holdsActivated: boolean,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      certificateActivated: number | BN | string,
      allowlistActivated: boolean,
      blocklistActivated: boolean,
      granularityByPartitionActivated: boolean,
      holdsActivated: boolean,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      certificateActivated: number | BN | string,
      allowlistActivated: boolean,
      blocklistActivated: boolean,
      granularityByPartitionActivated: boolean,
      holdsActivated: boolean,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      certificateActivated: number | BN | string,
      allowlistActivated: boolean,
      blocklistActivated: boolean,
      granularityByPartitionActivated: boolean,
      holdsActivated: boolean,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Release token hold.
   */
  releaseHold: {
    (
      token: string,
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeAllowlistAdmin: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeAllowlisted: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeBlocklistAdmin: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeBlocklisted: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeCertificateSigner: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removePauser: {
    (
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Renew hold.
   */
  renewHold: {
    (
      token: string,
      holdId: string,
      timeToExpiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      timeToExpiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      timeToExpiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      timeToExpiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Renew hold with expiration time.
   */
  renewHoldWithExpirationDate: {
    (
      token: string,
      holdId: string,
      expiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      holdId: string,
      expiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string,
      holdId: string,
      expiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      holdId: string,
      expiration: number | BN | string,
      certificate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceAllowlistAdmin: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceBlocklistAdmin: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceCertificateSigner: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renouncePauser: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Retrieve hold data.
   */
  retrieveHoldData(
    token: string,
    holdId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: string;
    7: string;
    8: BN;
  }>;

  /**
   * Get the list of token controllers for a given token.
   */
  retrieveTokenSetup(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: boolean;
    2: boolean;
    3: boolean;
    4: boolean;
    5: string[];
  }>;

  /**
   * Set partition granularity
   */
  setGranularityByPartition: {
    (
      token: string,
      partition: string,
      granularity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      partition: string,
      granularity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      partition: string,
      granularity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      partition: string,
      granularity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get spendable balance of a tokenholder.
   */
  spendableBalanceOf(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get spendable balance of a tokenholder for a specific partition.
   */
  spendableBalanceOfByPartition(
    token: string,
    partition: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Function called by the token contract before executing a transfer.
   * @param data Extra information.
   * @param from Token holder.
   * @param operator Address which triggered the balance decrease (through transfer or redemption).
   * @param operatorData Extra information, attached by the operator (if any).
   * @param partition Name of the partition (left empty for ERC20 transfer).
   * @param payload Payload of the initial transaction.
   * @param to Token recipient for a transfer and 0x for a redemption.
   * @param value Number of tokens the token holder balance is decreased by.
   */
  tokensToValidate: {
    (
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Total supply on hold.
   */
  totalSupplyOnHold(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Total supply on hold for a specific partition.
   */
  totalSupplyOnHoldByPartition(
    token: string,
    partition: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * called by the owner to unpause, returns to normal state
   */
  unpause: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get state of certificate (used or not).
   * @param sender Address whom to check the counter of.
   * @param token Token address.
   */
  usedCertificateNonce(
    token: string,
    sender: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get state of certificate (used or not).
   * @param salt First 32 bytes of certificate whose validity is being checked.
   * @param token Token address.
   */
  usedCertificateSalt(
    token: string,
    salt: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceMinter: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addAllowlistAdmin: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addAllowlisted: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addBlocklistAdmin: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addBlocklisted: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addCertificateSigner: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addPauser: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get balance on hold of a tokenholder.
     */
    balanceOnHold(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get balance on hold of a tokenholder for a specific partition.
     */
    balanceOnHoldByPartition(
      token: string,
      partition: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    canValidate(
      data: {
        token: string;
        payload: string;
        partition: string;
        operator: string;
        from: string;
        to: string;
        value: number | BN | string;
        data: string;
        operatorData: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Execute hold.
     */
    executeHold: {
      (
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Execute hold and keep open.
     */
    executeHoldAndKeepOpen: {
      (
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        value: number | BN | string,
        secret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get granularity for a given partition.
     * @param partition Name of the partition.
     * @param token Token address.
     */
    granularityByPartition(
      token: string,
      partition: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Create a new token hold.
     */
    hold: {
      (
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Create a new token hold on behalf of the token holder.
     */
    holdFrom: {
      (
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Create a new token hold with expiration date on behalf of the token holder.
     */
    holdFromWithExpirationDate: {
      (
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        sender: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Create a new token hold with expiration date.
     */
    holdWithExpirationDate: {
      (
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isAllowlistAdmin(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isAllowlisted(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isBlocklistAdmin(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isBlocklisted(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isCertificateSigner(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isPauser(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * called by the owner to pause, triggers stopped state
     */
    pause: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     */
    paused(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Create a new token pre-hold.
     */
    preHoldFor: {
      (
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        timeToExpiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Create a new token pre-hold with expiration date.
     */
    preHoldForWithExpirationDate: {
      (
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        recipient: string,
        notary: string,
        partition: string,
        value: number | BN | string,
        expiration: number | BN | string,
        secretHash: string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Register token setup.
     */
    registerTokenSetup: {
      (
        token: string,
        certificateActivated: number | BN | string,
        allowlistActivated: boolean,
        blocklistActivated: boolean,
        granularityByPartitionActivated: boolean,
        holdsActivated: boolean,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        certificateActivated: number | BN | string,
        allowlistActivated: boolean,
        blocklistActivated: boolean,
        granularityByPartitionActivated: boolean,
        holdsActivated: boolean,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        certificateActivated: number | BN | string,
        allowlistActivated: boolean,
        blocklistActivated: boolean,
        granularityByPartitionActivated: boolean,
        holdsActivated: boolean,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        certificateActivated: number | BN | string,
        allowlistActivated: boolean,
        blocklistActivated: boolean,
        granularityByPartitionActivated: boolean,
        holdsActivated: boolean,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Release token hold.
     */
    releaseHold: {
      (
        token: string,
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeAllowlistAdmin: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeAllowlisted: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeBlocklistAdmin: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeBlocklisted: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeCertificateSigner: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removePauser: {
      (
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Renew hold.
     */
    renewHold: {
      (
        token: string,
        holdId: string,
        timeToExpiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        timeToExpiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        timeToExpiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        timeToExpiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Renew hold with expiration time.
     */
    renewHoldWithExpirationDate: {
      (
        token: string,
        holdId: string,
        expiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        holdId: string,
        expiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        token: string,
        holdId: string,
        expiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        holdId: string,
        expiration: number | BN | string,
        certificate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceAllowlistAdmin: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceBlocklistAdmin: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceCertificateSigner: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renouncePauser: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Retrieve hold data.
     */
    retrieveHoldData(
      token: string,
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: BN;
      5: BN;
      6: string;
      7: string;
      8: BN;
    }>;

    /**
     * Get the list of token controllers for a given token.
     */
    retrieveTokenSetup(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: boolean;
      2: boolean;
      3: boolean;
      4: boolean;
      5: string[];
    }>;

    /**
     * Set partition granularity
     */
    setGranularityByPartition: {
      (
        token: string,
        partition: string,
        granularity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        partition: string,
        granularity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        partition: string,
        granularity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        partition: string,
        granularity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get spendable balance of a tokenholder.
     */
    spendableBalanceOf(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get spendable balance of a tokenholder for a specific partition.
     */
    spendableBalanceOfByPartition(
      token: string,
      partition: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Function called by the token contract before executing a transfer.
     * @param data Extra information.
     * @param from Token holder.
     * @param operator Address which triggered the balance decrease (through transfer or redemption).
     * @param operatorData Extra information, attached by the operator (if any).
     * @param partition Name of the partition (left empty for ERC20 transfer).
     * @param payload Payload of the initial transaction.
     * @param to Token recipient for a transfer and 0x for a redemption.
     * @param value Number of tokens the token holder balance is decreased by.
     */
    tokensToValidate: {
      (
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Total supply on hold.
     */
    totalSupplyOnHold(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Total supply on hold for a specific partition.
     */
    totalSupplyOnHoldByPartition(
      token: string,
      partition: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * called by the owner to unpause, returns to normal state
     */
    unpause: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get state of certificate (used or not).
     * @param sender Address whom to check the counter of.
     * @param token Token address.
     */
    usedCertificateNonce(
      token: string,
      sender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get state of certificate (used or not).
     * @param salt First 32 bytes of certificate whose validity is being checked.
     * @param token Token address.
     */
    usedCertificateSalt(
      token: string,
      salt: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    renounceMinter: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
