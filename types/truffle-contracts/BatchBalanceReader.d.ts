/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface BatchBalanceReaderContract
  extends Truffle.Contract<BatchBalanceReaderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BatchBalanceReaderInstance>;
}

type AllEvents = never;

export interface BatchBalanceReaderInstance extends Truffle.ContractInstance {
  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get a batch of ERC1400 token balances.
   * @param partitions Name of the partitions.
   * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
   * @param tokenHolders Addresses for which the balance is required.
   */
  balancesOfByPartition(
    tokenHolders: string[],
    tokenAddresses: string[],
    partitions: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Get a batch of ERC20 token balances.
   * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
   * @param tokenHolders Addresses for which the balance is required.
   */
  balancesOf(
    tokenHolders: string[],
    tokenAddresses: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Get a batch of ERC1400 token total supplies by partitions.
   * @param partitions Name of the partitions.
   * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
   */
  totalSuppliesByPartition(
    partitions: string[],
    tokenAddresses: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Get a batch of ERC20 token total supplies.
   * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
   */
  totalSupplies(
    tokenAddresses: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  methods: {
    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get a batch of ERC1400 token balances.
     * @param partitions Name of the partitions.
     * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
     * @param tokenHolders Addresses for which the balance is required.
     */
    balancesOfByPartition(
      tokenHolders: string[],
      tokenAddresses: string[],
      partitions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Get a batch of ERC20 token balances.
     * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
     * @param tokenHolders Addresses for which the balance is required.
     */
    balancesOf(
      tokenHolders: string[],
      tokenAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Get a batch of ERC1400 token total supplies by partitions.
     * @param partitions Name of the partitions.
     * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
     */
    totalSuppliesByPartition(
      partitions: string[],
      tokenAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Get a batch of ERC20 token total supplies.
     * @param tokenAddresses Addresses of tokens where the balances need to be fetched.
     */
    totalSupplies(
      tokenAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
