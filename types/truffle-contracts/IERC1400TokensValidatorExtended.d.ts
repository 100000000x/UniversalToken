/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERC1400TokensValidatorExtendedContract
  extends Truffle.Contract<IERC1400TokensValidatorExtendedInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IERC1400TokensValidatorExtendedInstance>;
}

type AllEvents = never;

export interface IERC1400TokensValidatorExtendedInstance
  extends Truffle.ContractInstance {
  retrieveTokenSetup(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: boolean;
    2: boolean;
    3: boolean;
    4: boolean;
    5: string[];
  }>;

  spendableBalanceOfByPartition(
    token: string,
    partition: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isAllowlisted(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isBlocklisted(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    retrieveTokenSetup(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: boolean;
      2: boolean;
      3: boolean;
      4: boolean;
      5: string[];
    }>;

    spendableBalanceOfByPartition(
      token: string,
      partition: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    isAllowlisted(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isBlocklisted(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
