/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FundIssuerContract
  extends Truffle.Contract<FundIssuerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FundIssuerInstance>;
}

type AllEvents = never;

export interface FundIssuerInstance extends Truffle.ContractInstance {
  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Indicate whether or not the fund issuance contract can receive the tokens or not. [USED FOR ERC1400 TOKENS ONLY]
   * [ERC1400TokensRecipient INTERFACE (1/2)]
   * @param data Information attached to the token transfer.
   * @param operatorData Information attached to the DVP transfer, by the operator.
   */
  canReceive(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: string,
    arg5: number | BN | string,
    data: string,
    operatorData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Hook function executed when tokens are sent to the fund issuance contract. [USED FOR ERC1400 TOKENS ONLY]
   * [ERC1400TokensRecipient INTERFACE (2/2)]
   * @param data Information attached to the token transfer.
   * @param from Token holder.
   * @param operatorData Information attached to the DVP transfer, by the operator.
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  tokensReceived: {
    (
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Start a new subscription for a given asset in the fund issuance smart contract.
   * @param assetAddress Address of the token representing the asset.
   * @param assetClass Asset class.
   * @param paymentAddress Address of the payment token (only used id paymentType <> OFFCHAIN).
   * @param paymentPartition Partition of the payment token (only used if paymentType is ERC1400).
   * @param paymentPeriodLength Length of payment period.
   * @param paymentType Type of payment (OFFCHAIN | ERC20 | ERC1400).
   * @param subscriptionPeriodLength Length of subscription period.
   * @param subscriptionsOpened Set 'true' if subscriptions are opened, 'false' if not.
   * @param valuationPeriodLength Length of valuation period.
   */
  setAssetRules: {
    (
      assetAddress: string,
      assetClass: string,
      firstStartTime: number | BN | string,
      subscriptionPeriodLength: number | BN | string,
      valuationPeriodLength: number | BN | string,
      paymentPeriodLength: number | BN | string,
      paymentType: number | BN | string,
      paymentAddress: string,
      paymentPartition: string,
      fundAddress: string,
      subscriptionsOpened: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      assetAddress: string,
      assetClass: string,
      firstStartTime: number | BN | string,
      subscriptionPeriodLength: number | BN | string,
      valuationPeriodLength: number | BN | string,
      paymentPeriodLength: number | BN | string,
      paymentType: number | BN | string,
      paymentAddress: string,
      paymentPartition: string,
      fundAddress: string,
      subscriptionsOpened: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      assetAddress: string,
      assetClass: string,
      firstStartTime: number | BN | string,
      subscriptionPeriodLength: number | BN | string,
      valuationPeriodLength: number | BN | string,
      paymentPeriodLength: number | BN | string,
      paymentType: number | BN | string,
      paymentAddress: string,
      paymentPartition: string,
      fundAddress: string,
      subscriptionsOpened: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      assetAddress: string,
      assetClass: string,
      firstStartTime: number | BN | string,
      subscriptionPeriodLength: number | BN | string,
      valuationPeriodLength: number | BN | string,
      paymentPeriodLength: number | BN | string,
      paymentType: number | BN | string,
      paymentAddress: string,
      paymentPartition: string,
      fundAddress: string,
      subscriptionsOpened: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set asset value rules for a given asset.
   * @param assetAddress Address of the token representing the asset.
   * @param assetClass Asset class.
   * @param assetValue Asset value.
   * @param assetValueType Asset value type.
   * @param reverseAssetValue Reverse asset value.
   */
  setAssetValueRules: {
    (
      assetAddress: string,
      assetClass: string,
      assetValueType: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      assetAddress: string,
      assetClass: string,
      assetValueType: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      assetAddress: string,
      assetClass: string,
      assetValueType: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      assetAddress: string,
      assetClass: string,
      assetValueType: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Subscribe for a given asset, by creating an order.
   * @param assetAddress Address of the token representing the asset.
   * @param assetClass Asset class.
   * @param orderAmount Amount of assets to purchase (used in case order type is 'amount').
   * @param orderType Order type (value | amount).
   * @param orderValue Value of assets to purchase (used in case order type is 'value').
   */
  subscribe: {
    (
      assetAddress: string,
      assetClass: string,
      orderValue: number | BN | string,
      orderAmount: number | BN | string,
      orderType: number | BN | string,
      executePaymentAtSubscription: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      assetAddress: string,
      assetClass: string,
      orderValue: number | BN | string,
      orderAmount: number | BN | string,
      orderType: number | BN | string,
      executePaymentAtSubscription: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      assetAddress: string,
      assetClass: string,
      orderValue: number | BN | string,
      orderAmount: number | BN | string,
      orderType: number | BN | string,
      executePaymentAtSubscription: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      assetAddress: string,
      assetClass: string,
      orderValue: number | BN | string,
      orderAmount: number | BN | string,
      orderType: number | BN | string,
      executePaymentAtSubscription: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Cancel an order.
   * @param orderIndex Index of the order to cancel.
   */
  cancelOrder: {
    (
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Reject an order.
   * @param orderIndex Index of the order to reject.
   * @param rejected Set to 'true' if order shall be rejected, and set to 'false' if rejection shall be cancelled
   */
  rejectOrder: {
    (
      orderIndex: number | BN | string,
      rejected: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      orderIndex: number | BN | string,
      rejected: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orderIndex: number | BN | string,
      rejected: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orderIndex: number | BN | string,
      rejected: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set assetValue for a given asset.
   * @param assetValue Units of cash required for a unit of asset.
   * @param cycleIndex Index of the cycle where assetValue needs to be set.
   * @param reverseAssetValue Units of asset required for a unit of cash.
   */
  valuate: {
    (
      cycleIndex: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cycleIndex: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cycleIndex: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cycleIndex: number | BN | string,
      assetValue: number | BN | string,
      reverseAssetValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Execute payment for a given order.
   * @param orderIndex Index of the order to declare as paid.
   */
  executePaymentAsInvestor: {
    (
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set payment as executed for a given order.
   * @param bypassPayment Bypass payment (in case payment has been performed off-chain)
   * @param orderIndex Index of the order to declare as paid.
   */
  executePaymentAsController: {
    (
      orderIndex: number | BN | string,
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      orderIndex: number | BN | string,
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orderIndex: number | BN | string,
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orderIndex: number | BN | string,
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set payments as executed for a batch of given orders.
   * @param bypassPayment Bypass payment (in case payment has been performed off-chain)
   * @param orderIndexes Indexes of the orders to declare as paid.
   */
  batchExecutePaymentsAsController: {
    (
      orderIndexes: (number | BN | string)[],
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      orderIndexes: (number | BN | string)[],
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orderIndexes: (number | BN | string)[],
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orderIndexes: (number | BN | string)[],
      bypassPayment: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Settle a batch of given orders.
   * @param orderIndexes Indexes of the orders to settle.
   */
  batchSettleOrders: {
    (
      orderIndexes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      orderIndexes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orderIndexes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orderIndexes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Finalize a given cycle.
   * @param cycleIndex Index of the cycle to finalize.
   */
  finalizeCycle: {
    (
      cycleIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cycleIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cycleIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cycleIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Retrieve sum of paid/unpaid settled orders for a given cycle.
   * @param cycleIndex Index of the cycle.
   */
  getTotalSettledForCycle(
    cycleIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

  /**
   * Retrieve the current state of the cycle.
   * @param cycleIndex Index of the cycle.
   */
  getCycleState(
    cycleIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the list of token controllers for a given token.
   * @param tokenAddress Token address.
   */
  tokenControllers(
    tokenAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Set list of token controllers for a given token.
   * @param operators Operators addresses.
   * @param tokenAddress Token address.
   */
  setTokenControllers: {
    (
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the list of price oracles for a given token.
   * @param tokenAddress Token address.
   */
  priceOracles(
    tokenAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Set list of price oracles for a given token.
   * @param oracles Oracles addresses.
   * @param tokenAddress Token address.
   */
  setPriceOracles: {
    (
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get asset rules.
   * @param assetAddress Address of the asset.
   * @param assetClass Class of the asset.
   */
  getAssetRules(
    assetAddress: string,
    assetClass: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: string;
    6: string;
    7: string;
    8: boolean;
  }>;

  /**
   * Get the cycle asset value rules.
   * @param assetAddress Address of the asset.
   * @param assetClass Class of the asset.
   */
  getAssetValueRules(
    assetAddress: string,
    assetClass: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  /**
   * Get total number of cycles in the contract.
   */
  getNbCycles(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Get the index of the last cycle created for a given asset class.
   * @param assetAddress Address of the token representing the asset.
   * @param assetClass Asset class.
   */
  getLastCycleIndex(
    assetAddress: string,
    assetClass: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the cycle.
   * @param index Index of the cycle.
   */
  getCycle(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: string;
    8: string;
    9: boolean;
  }>;

  /**
   * Get the cycle asset value.
   * @param index Index of the cycle.
   */
  getCycleAssetValue(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  /**
   * Get total number of orders in the contract.
   */
  getNbOrders(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Retrieve an order.
   * @param index Index of the order.
   */
  getOrder(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: BN; 3: BN; 4: BN; 5: BN }>;

  /**
   * Retrieve order amount and order value calculated based on cycle valuation.
   * @param orderIndex Index of the order.
   */
  getOrderAmountAndValue(
    orderIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  /**
   * Get list of cycle orders.
   * @param index Index of the cycle.
   */
  getCycleOrders(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Get list of investor orders.
   */
  getInvestorOrders(
    investor: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  methods: {
    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Indicate whether or not the fund issuance contract can receive the tokens or not. [USED FOR ERC1400 TOKENS ONLY]
     * [ERC1400TokensRecipient INTERFACE (1/2)]
     * @param data Information attached to the token transfer.
     * @param operatorData Information attached to the DVP transfer, by the operator.
     */
    canReceive(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Hook function executed when tokens are sent to the fund issuance contract. [USED FOR ERC1400 TOKENS ONLY]
     * [ERC1400TokensRecipient INTERFACE (2/2)]
     * @param data Information attached to the token transfer.
     * @param from Token holder.
     * @param operatorData Information attached to the DVP transfer, by the operator.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    tokensReceived: {
      (
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Start a new subscription for a given asset in the fund issuance smart contract.
     * @param assetAddress Address of the token representing the asset.
     * @param assetClass Asset class.
     * @param paymentAddress Address of the payment token (only used id paymentType <> OFFCHAIN).
     * @param paymentPartition Partition of the payment token (only used if paymentType is ERC1400).
     * @param paymentPeriodLength Length of payment period.
     * @param paymentType Type of payment (OFFCHAIN | ERC20 | ERC1400).
     * @param subscriptionPeriodLength Length of subscription period.
     * @param subscriptionsOpened Set 'true' if subscriptions are opened, 'false' if not.
     * @param valuationPeriodLength Length of valuation period.
     */
    setAssetRules: {
      (
        assetAddress: string,
        assetClass: string,
        firstStartTime: number | BN | string,
        subscriptionPeriodLength: number | BN | string,
        valuationPeriodLength: number | BN | string,
        paymentPeriodLength: number | BN | string,
        paymentType: number | BN | string,
        paymentAddress: string,
        paymentPartition: string,
        fundAddress: string,
        subscriptionsOpened: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        assetAddress: string,
        assetClass: string,
        firstStartTime: number | BN | string,
        subscriptionPeriodLength: number | BN | string,
        valuationPeriodLength: number | BN | string,
        paymentPeriodLength: number | BN | string,
        paymentType: number | BN | string,
        paymentAddress: string,
        paymentPartition: string,
        fundAddress: string,
        subscriptionsOpened: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        assetAddress: string,
        assetClass: string,
        firstStartTime: number | BN | string,
        subscriptionPeriodLength: number | BN | string,
        valuationPeriodLength: number | BN | string,
        paymentPeriodLength: number | BN | string,
        paymentType: number | BN | string,
        paymentAddress: string,
        paymentPartition: string,
        fundAddress: string,
        subscriptionsOpened: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        assetAddress: string,
        assetClass: string,
        firstStartTime: number | BN | string,
        subscriptionPeriodLength: number | BN | string,
        valuationPeriodLength: number | BN | string,
        paymentPeriodLength: number | BN | string,
        paymentType: number | BN | string,
        paymentAddress: string,
        paymentPartition: string,
        fundAddress: string,
        subscriptionsOpened: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set asset value rules for a given asset.
     * @param assetAddress Address of the token representing the asset.
     * @param assetClass Asset class.
     * @param assetValue Asset value.
     * @param assetValueType Asset value type.
     * @param reverseAssetValue Reverse asset value.
     */
    setAssetValueRules: {
      (
        assetAddress: string,
        assetClass: string,
        assetValueType: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        assetAddress: string,
        assetClass: string,
        assetValueType: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        assetAddress: string,
        assetClass: string,
        assetValueType: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        assetAddress: string,
        assetClass: string,
        assetValueType: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Subscribe for a given asset, by creating an order.
     * @param assetAddress Address of the token representing the asset.
     * @param assetClass Asset class.
     * @param orderAmount Amount of assets to purchase (used in case order type is 'amount').
     * @param orderType Order type (value | amount).
     * @param orderValue Value of assets to purchase (used in case order type is 'value').
     */
    subscribe: {
      (
        assetAddress: string,
        assetClass: string,
        orderValue: number | BN | string,
        orderAmount: number | BN | string,
        orderType: number | BN | string,
        executePaymentAtSubscription: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        assetAddress: string,
        assetClass: string,
        orderValue: number | BN | string,
        orderAmount: number | BN | string,
        orderType: number | BN | string,
        executePaymentAtSubscription: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        assetAddress: string,
        assetClass: string,
        orderValue: number | BN | string,
        orderAmount: number | BN | string,
        orderType: number | BN | string,
        executePaymentAtSubscription: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        assetAddress: string,
        assetClass: string,
        orderValue: number | BN | string,
        orderAmount: number | BN | string,
        orderType: number | BN | string,
        executePaymentAtSubscription: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Cancel an order.
     * @param orderIndex Index of the order to cancel.
     */
    cancelOrder: {
      (
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Reject an order.
     * @param orderIndex Index of the order to reject.
     * @param rejected Set to 'true' if order shall be rejected, and set to 'false' if rejection shall be cancelled
     */
    rejectOrder: {
      (
        orderIndex: number | BN | string,
        rejected: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        orderIndex: number | BN | string,
        rejected: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        orderIndex: number | BN | string,
        rejected: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        orderIndex: number | BN | string,
        rejected: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set assetValue for a given asset.
     * @param assetValue Units of cash required for a unit of asset.
     * @param cycleIndex Index of the cycle where assetValue needs to be set.
     * @param reverseAssetValue Units of asset required for a unit of cash.
     */
    valuate: {
      (
        cycleIndex: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cycleIndex: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cycleIndex: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cycleIndex: number | BN | string,
        assetValue: number | BN | string,
        reverseAssetValue: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Execute payment for a given order.
     * @param orderIndex Index of the order to declare as paid.
     */
    executePaymentAsInvestor: {
      (
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        orderIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set payment as executed for a given order.
     * @param bypassPayment Bypass payment (in case payment has been performed off-chain)
     * @param orderIndex Index of the order to declare as paid.
     */
    executePaymentAsController: {
      (
        orderIndex: number | BN | string,
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        orderIndex: number | BN | string,
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        orderIndex: number | BN | string,
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        orderIndex: number | BN | string,
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set payments as executed for a batch of given orders.
     * @param bypassPayment Bypass payment (in case payment has been performed off-chain)
     * @param orderIndexes Indexes of the orders to declare as paid.
     */
    batchExecutePaymentsAsController: {
      (
        orderIndexes: (number | BN | string)[],
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        orderIndexes: (number | BN | string)[],
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        orderIndexes: (number | BN | string)[],
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        orderIndexes: (number | BN | string)[],
        bypassPayment: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Settle a batch of given orders.
     * @param orderIndexes Indexes of the orders to settle.
     */
    batchSettleOrders: {
      (
        orderIndexes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        orderIndexes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        orderIndexes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        orderIndexes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Finalize a given cycle.
     * @param cycleIndex Index of the cycle to finalize.
     */
    finalizeCycle: {
      (
        cycleIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cycleIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cycleIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cycleIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Retrieve sum of paid/unpaid settled orders for a given cycle.
     * @param cycleIndex Index of the cycle.
     */
    getTotalSettledForCycle(
      cycleIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

    /**
     * Retrieve the current state of the cycle.
     * @param cycleIndex Index of the cycle.
     */
    getCycleState(
      cycleIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the list of token controllers for a given token.
     * @param tokenAddress Token address.
     */
    tokenControllers(
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Set list of token controllers for a given token.
     * @param operators Operators addresses.
     * @param tokenAddress Token address.
     */
    setTokenControllers: {
      (
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the list of price oracles for a given token.
     * @param tokenAddress Token address.
     */
    priceOracles(
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Set list of price oracles for a given token.
     * @param oracles Oracles addresses.
     * @param tokenAddress Token address.
     */
    setPriceOracles: {
      (
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get asset rules.
     * @param assetAddress Address of the asset.
     * @param assetClass Class of the asset.
     */
    getAssetRules(
      assetAddress: string,
      assetClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: BN;
      2: BN;
      3: BN;
      4: BN;
      5: string;
      6: string;
      7: string;
      8: boolean;
    }>;

    /**
     * Get the cycle asset value rules.
     * @param assetAddress Address of the asset.
     * @param assetClass Class of the asset.
     */
    getAssetValueRules(
      assetAddress: string,
      assetClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    /**
     * Get total number of cycles in the contract.
     */
    getNbCycles(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Get the index of the last cycle created for a given asset class.
     * @param assetAddress Address of the token representing the asset.
     * @param assetClass Asset class.
     */
    getLastCycleIndex(
      assetAddress: string,
      assetClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the cycle.
     * @param index Index of the cycle.
     */
    getCycle(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: BN;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: string;
      8: string;
      9: boolean;
    }>;

    /**
     * Get the cycle asset value.
     * @param index Index of the cycle.
     */
    getCycleAssetValue(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    /**
     * Get total number of orders in the contract.
     */
    getNbOrders(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Retrieve an order.
     * @param index Index of the order.
     */
    getOrder(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: BN; 3: BN; 4: BN; 5: BN }>;

    /**
     * Retrieve order amount and order value calculated based on cycle valuation.
     * @param orderIndex Index of the order.
     */
    getOrderAmountAndValue(
      orderIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    /**
     * Get list of cycle orders.
     * @param index Index of the cycle.
     */
    getCycleOrders(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Get list of investor orders.
     */
    getInvestorOrders(
      investor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
