/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface BatchTokenIssuerContract
  extends Truffle.Contract<BatchTokenIssuerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BatchTokenIssuerInstance>;
}

type AllEvents = never;

export interface BatchTokenIssuerInstance extends Truffle.ContractInstance {
  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Issue tokens for multiple addresses.
   * @param partitions Name of the partitions.
   * @param token Address of token where the tokens need to be issued.
   * @param tokenHolders Addresses for which we want to issue tokens.
   * @param values Number of tokens issued.
   */
  batchIssueByPartition: {
    (
      token: string,
      partitions: string[],
      tokenHolders: string[],
      values: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      partitions: string[],
      tokenHolders: string[],
      values: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      token: string,
      partitions: string[],
      tokenHolders: string[],
      values: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      partitions: string[],
      tokenHolders: string[],
      values: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Issue tokens for multiple addresses.
     * @param partitions Name of the partitions.
     * @param token Address of token where the tokens need to be issued.
     * @param tokenHolders Addresses for which we want to issue tokens.
     * @param values Number of tokens issued.
     */
    batchIssueByPartition: {
      (
        token: string,
        partitions: string[],
        tokenHolders: string[],
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        partitions: string[],
        tokenHolders: string[],
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        token: string,
        partitions: string[],
        tokenHolders: string[],
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        partitions: string[],
        tokenHolders: string[],
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
