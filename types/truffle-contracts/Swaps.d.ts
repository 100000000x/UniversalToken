/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SwapsContract extends Truffle.Contract<SwapsInstance> {
  "new"(
    owned: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<SwapsInstance>;
}

export interface CreateNote {
  name: "CreateNote";
  args: {
    owner: string;
    noteHash: string;
    metadata: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface DestroyNote {
  name: "DestroyNote";
  args: {
    owner: string;
    noteHash: string;
    0: string;
    1: string;
  };
}

export interface ExecutedHold {
  name: "ExecutedHold";
  args: {
    token: string;
    holdId: string;
    lockPreimage: string;
    recipient: string;
    0: string;
    1: string;
    2: string;
    3: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    tokens: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface TransferByPartition {
  name: "TransferByPartition";
  args: {
    fromPartition: string;
    operator: string;
    from: string;
    to: string;
    value: BN;
    data: string;
    operatorData: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: string;
    6: string;
  };
}

type AllEvents =
  | CreateNote
  | DestroyNote
  | ExecutedHold
  | OwnershipTransferred
  | Transfer
  | TransferByPartition;

export interface SwapsInstance extends Truffle.ContractInstance {
  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Indicate whether or not the DVP contract can receive the tokens or not. [USED FOR ERC1400 TOKENS ONLY]
   * [ERC1400TokensRecipient INTERFACE (1/2)]
   * @param data Information attached to the token transfer.
   * @param operatorData Information attached to the DVP transfer, by the operator.
   */
  canReceive(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: string,
    arg5: number | BN | string,
    data: string,
    operatorData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Hook function executed when tokens are sent to the DVP contract. [USED FOR ERC1400 TOKENS ONLY]
   * [ERC1400TokensRecipient INTERFACE (2/2)]
   * @param data Information attached to the token transfer.
   * @param from Token holder.
   * @param operatorData Information attached to the DVP transfer, by the operator.
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  tokensReceived: {
    (
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      partition: string,
      arg2: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestTrade: {
    (
      inputData: {
        holder1: string;
        holder2: string;
        executer: string;
        expirationDate: number | BN | string;
        tokenAddress1: string;
        tokenValue1: number | BN | string;
        tokenId1: string;
        tokenStandard1: number | BN | string;
        tokenAddress2: string;
        tokenValue2: number | BN | string;
        tokenId2: string;
        tokenStandard2: number | BN | string;
        tradeType1: number | BN | string;
        tradeType2: number | BN | string;
        settlementDate: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      inputData: {
        holder1: string;
        holder2: string;
        executer: string;
        expirationDate: number | BN | string;
        tokenAddress1: string;
        tokenValue1: number | BN | string;
        tokenId1: string;
        tokenStandard1: number | BN | string;
        tokenAddress2: string;
        tokenValue2: number | BN | string;
        tokenId2: string;
        tokenStandard2: number | BN | string;
        tradeType1: number | BN | string;
        tradeType2: number | BN | string;
        settlementDate: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      inputData: {
        holder1: string;
        holder2: string;
        executer: string;
        expirationDate: number | BN | string;
        tokenAddress1: string;
        tokenValue1: number | BN | string;
        tokenId1: string;
        tokenStandard1: number | BN | string;
        tokenAddress2: string;
        tokenValue2: number | BN | string;
        tokenId2: string;
        tokenStandard2: number | BN | string;
        tradeType1: number | BN | string;
        tradeType2: number | BN | string;
        settlementDate: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      inputData: {
        holder1: string;
        holder2: string;
        executer: string;
        expirationDate: number | BN | string;
        tokenAddress1: string;
        tokenValue1: number | BN | string;
        tokenId1: string;
        tokenStandard1: number | BN | string;
        tokenAddress2: string;
        tokenValue2: number | BN | string;
        tokenId2: string;
        tokenStandard2: number | BN | string;
        tradeType1: number | BN | string;
        tradeType2: number | BN | string;
        settlementDate: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Accept a given trade (+ potentially escrow tokens).
   * @param index Index of the trade to be accepted.
   */
  acceptTrade: {
    (
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Accept a given trade (+ potentially escrow tokens).
   * @param index Index of the trade to be accepted.
   */
  acceptTradeWithPreimage: {
    (
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Verify if a trade has been accepted by the token holders. The trade needs to be accepted by both parties (token holders) before it gets executed.
   * @param index Index of the trade to be accepted.
   */
  getTradeAcceptanceStatus(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approveTrade: {
    (
      index: number | BN | string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approve a trade (if the tokens involved in the trade are controlled) This function can only be called by a token controller of one of the tokens involved in the trade. Indeed, when a token smart contract is controlled by an owner, the owner can decide to open the secondary market by:  - Allowlisting the DVP smart contract  - Setting "token controllers" in the DVP smart contract, in order to approve all the trades made with his token
   * @param approved 'true' if trade is approved, 'false' if not.
   * @param index Index of the trade to be executed.
   */
  approveTradeWithPreimage: {
    (
      index: number | BN | string,
      approved: boolean,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      approved: boolean,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      approved: boolean,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      approved: boolean,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Verify if a trade has been approved by the token controllers. In case a given token has token controllers, those need to validate the trade before it gets executed.
   * @param index Index of the trade to be approved.
   */
  getTradeApprovalStatus(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  executeTrade: {
    (
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Execute a trade in the DVP contract if possible (e.g. if tokens have been esccrowed, in case it is required). This function can only be called by the executer specified at trade creation. If no executer is specified, the trade can be launched by anyone.
   * @param index Index of the trade to be executed.
   */
  executeTradeWithPreimage: {
    (
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  forceTrade: {
    (
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Force a trade execution in the DVP contract by transferring tokens back to their target recipients.
   * @param index Index of the trade to be forced.
   */
  forceTradeWithPreimage: {
    (
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      preimage: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Cancel a trade execution in the DVP contract by transferring tokens back to their initial owners.
   * @param index Index of the trade to be cancelled.
   */
  cancelTrade: {
    (
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Renounce ownership of the contract.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Get the list of trade executers as defined by the DVP contract.
   */
  tradeExecuters(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  /**
   * Set list of trade executers for the DVP contract.
   * @param operators Trade executers addresses.
   */
  setTradeExecuters: {
    (operators: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the list of token controllers for a given token.
   * @param tokenAddress Token address.
   */
  tokenControllers(
    tokenAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Set list of token controllers for a given token.
   * @param operators Operators addresses.
   * @param tokenAddress Token address.
   */
  setTokenControllers: {
    (
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the list of price oracles for a given token.
   * @param tokenAddress Token address.
   */
  priceOracles(
    tokenAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Set list of price oracles for a given token.
   * @param oracles Oracles addresses.
   * @param tokenAddress Token address.
   */
  setPriceOracles: {
    (
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress: string,
      oracles: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get price of the token.
   * @param tokenAddress1 Address of the token to be priced.
   * @param tokenAddress2 Address of the token to pay for token1.
   */
  getPriceOwnership(
    tokenAddress1: string,
    tokenAddress2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Take ownership for setting the price of a token.
   * @param tokenAddress1 Address of the token to be priced.
   * @param tokenAddress2 Address of the token to pay for token1.
   */
  setPriceOwnership: {
    (
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress1: string,
      tokenAddress2: string,
      priceOwnership: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get date after which the token price can potentially be set by an oracle (0 if price can not be set by an oracle).
   * @param tokenAddress Token address.
   */
  variablePriceStartDate(
    tokenAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Set date after which the token price can potentially be set by an oracle (0 if price can not be set by an oracle).
   * @param startDate Date after which token price can potentially be set by an oracle (0 if price can not be set by an oracle).
   * @param tokenAddress Token address.
   */
  setVariablePriceStartDate: {
    (
      tokenAddress: string,
      startDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress: string,
      startDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress: string,
      startDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress: string,
      startDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get price of the token.
   * @param tokenAddress1 Address of the token to be priced.
   * @param tokenAddress2 Address of the token to pay for token1.
   * @param tokenId1 ID/partition of the token2 (set to 0 bytes32 if price is set for all IDs/partitions).
   */
  getTokenPrice(
    tokenAddress1: string,
    tokenAddress2: string,
    tokenId1: string,
    tokenId2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Set price of a token.
   * @param newPrice New price of the token.
   * @param tokenAddress1 Address of the token to be priced.
   * @param tokenAddress2 Address of the token to pay for token1.
   * @param tokenId1 ID/partition of the token1 (set to 0 bytes32 if price is set for all IDs/partitions).
   * @param tokenId2 ID/partition of the token2 (set to 0 bytes32 if price is set for all IDs/partitions).
   */
  setTokenPrice: {
    (
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: string,
      tokenId2: string,
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: string,
      tokenId2: string,
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: string,
      tokenId2: string,
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: string,
      tokenId2: string,
      newPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get amount of token2 to pay to acquire the token1.
   * @param index Index of the DVP request.
   */
  getPrice(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the trade.
   * @param index Index of the trade.
   */
  getTrade(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    holder1: string;
    holder2: string;
    executer: string;
    expirationDate: BN;
    settlementDate: BN;
    userTradeData1: {
      tokenAddress: string;
      tokenValue: BN;
      tokenId: string;
      tokenStandard: BN;
      accepted: boolean;
      approved: boolean;
      tradeType: BN;
    };
    userTradeData2: {
      tokenAddress: string;
      tokenValue: BN;
      tokenId: string;
      tokenStandard: BN;
      accepted: boolean;
      approved: boolean;
      tradeType: BN;
    };
    state: BN;
  }>;

  /**
   * Get the total number of requests in the DVP contract.
   */
  getNbTrades(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Indicate whether or not the DVP contract can receive the tokens or not. [USED FOR ERC1400 TOKENS ONLY]
     * [ERC1400TokensRecipient INTERFACE (1/2)]
     * @param data Information attached to the token transfer.
     * @param operatorData Information attached to the DVP transfer, by the operator.
     */
    canReceive(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      arg5: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Hook function executed when tokens are sent to the DVP contract. [USED FOR ERC1400 TOKENS ONLY]
     * [ERC1400TokensRecipient INTERFACE (2/2)]
     * @param data Information attached to the token transfer.
     * @param from Token holder.
     * @param operatorData Information attached to the DVP transfer, by the operator.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    tokensReceived: {
      (
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        partition: string,
        arg2: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestTrade: {
      (
        inputData: {
          holder1: string;
          holder2: string;
          executer: string;
          expirationDate: number | BN | string;
          tokenAddress1: string;
          tokenValue1: number | BN | string;
          tokenId1: string;
          tokenStandard1: number | BN | string;
          tokenAddress2: string;
          tokenValue2: number | BN | string;
          tokenId2: string;
          tokenStandard2: number | BN | string;
          tradeType1: number | BN | string;
          tradeType2: number | BN | string;
          settlementDate: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        inputData: {
          holder1: string;
          holder2: string;
          executer: string;
          expirationDate: number | BN | string;
          tokenAddress1: string;
          tokenValue1: number | BN | string;
          tokenId1: string;
          tokenStandard1: number | BN | string;
          tokenAddress2: string;
          tokenValue2: number | BN | string;
          tokenId2: string;
          tokenStandard2: number | BN | string;
          tradeType1: number | BN | string;
          tradeType2: number | BN | string;
          settlementDate: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        inputData: {
          holder1: string;
          holder2: string;
          executer: string;
          expirationDate: number | BN | string;
          tokenAddress1: string;
          tokenValue1: number | BN | string;
          tokenId1: string;
          tokenStandard1: number | BN | string;
          tokenAddress2: string;
          tokenValue2: number | BN | string;
          tokenId2: string;
          tokenStandard2: number | BN | string;
          tradeType1: number | BN | string;
          tradeType2: number | BN | string;
          settlementDate: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        inputData: {
          holder1: string;
          holder2: string;
          executer: string;
          expirationDate: number | BN | string;
          tokenAddress1: string;
          tokenValue1: number | BN | string;
          tokenId1: string;
          tokenStandard1: number | BN | string;
          tokenAddress2: string;
          tokenValue2: number | BN | string;
          tokenId2: string;
          tokenStandard2: number | BN | string;
          tradeType1: number | BN | string;
          tradeType2: number | BN | string;
          settlementDate: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Accept a given trade (+ potentially escrow tokens).
     * @param index Index of the trade to be accepted.
     */
    acceptTrade: {
      (
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Accept a given trade (+ potentially escrow tokens).
     * @param index Index of the trade to be accepted.
     */
    acceptTradeWithPreimage: {
      (
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Verify if a trade has been accepted by the token holders. The trade needs to be accepted by both parties (token holders) before it gets executed.
     * @param index Index of the trade to be accepted.
     */
    getTradeAcceptanceStatus(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    approveTrade: {
      (
        index: number | BN | string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approve a trade (if the tokens involved in the trade are controlled) This function can only be called by a token controller of one of the tokens involved in the trade. Indeed, when a token smart contract is controlled by an owner, the owner can decide to open the secondary market by:  - Allowlisting the DVP smart contract  - Setting "token controllers" in the DVP smart contract, in order to approve all the trades made with his token
     * @param approved 'true' if trade is approved, 'false' if not.
     * @param index Index of the trade to be executed.
     */
    approveTradeWithPreimage: {
      (
        index: number | BN | string,
        approved: boolean,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        approved: boolean,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        approved: boolean,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        approved: boolean,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Verify if a trade has been approved by the token controllers. In case a given token has token controllers, those need to validate the trade before it gets executed.
     * @param index Index of the trade to be approved.
     */
    getTradeApprovalStatus(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    executeTrade: {
      (
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Execute a trade in the DVP contract if possible (e.g. if tokens have been esccrowed, in case it is required). This function can only be called by the executer specified at trade creation. If no executer is specified, the trade can be launched by anyone.
     * @param index Index of the trade to be executed.
     */
    executeTradeWithPreimage: {
      (
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    forceTrade: {
      (
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Force a trade execution in the DVP contract by transferring tokens back to their target recipients.
     * @param index Index of the trade to be forced.
     */
    forceTradeWithPreimage: {
      (
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        preimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Cancel a trade execution in the DVP contract by transferring tokens back to their initial owners.
     * @param index Index of the trade to be cancelled.
     */
    cancelTrade: {
      (
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        index: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Renounce ownership of the contract.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Get the list of trade executers as defined by the DVP contract.
     */
    tradeExecuters(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    /**
     * Set list of trade executers for the DVP contract.
     * @param operators Trade executers addresses.
     */
    setTradeExecuters: {
      (operators: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the list of token controllers for a given token.
     * @param tokenAddress Token address.
     */
    tokenControllers(
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Set list of token controllers for a given token.
     * @param operators Operators addresses.
     * @param tokenAddress Token address.
     */
    setTokenControllers: {
      (
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the list of price oracles for a given token.
     * @param tokenAddress Token address.
     */
    priceOracles(
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Set list of price oracles for a given token.
     * @param oracles Oracles addresses.
     * @param tokenAddress Token address.
     */
    setPriceOracles: {
      (
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress: string,
        oracles: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get price of the token.
     * @param tokenAddress1 Address of the token to be priced.
     * @param tokenAddress2 Address of the token to pay for token1.
     */
    getPriceOwnership(
      tokenAddress1: string,
      tokenAddress2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Take ownership for setting the price of a token.
     * @param tokenAddress1 Address of the token to be priced.
     * @param tokenAddress2 Address of the token to pay for token1.
     */
    setPriceOwnership: {
      (
        tokenAddress1: string,
        tokenAddress2: string,
        priceOwnership: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress1: string,
        tokenAddress2: string,
        priceOwnership: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress1: string,
        tokenAddress2: string,
        priceOwnership: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress1: string,
        tokenAddress2: string,
        priceOwnership: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get date after which the token price can potentially be set by an oracle (0 if price can not be set by an oracle).
     * @param tokenAddress Token address.
     */
    variablePriceStartDate(
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Set date after which the token price can potentially be set by an oracle (0 if price can not be set by an oracle).
     * @param startDate Date after which token price can potentially be set by an oracle (0 if price can not be set by an oracle).
     * @param tokenAddress Token address.
     */
    setVariablePriceStartDate: {
      (
        tokenAddress: string,
        startDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress: string,
        startDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress: string,
        startDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress: string,
        startDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get price of the token.
     * @param tokenAddress1 Address of the token to be priced.
     * @param tokenAddress2 Address of the token to pay for token1.
     * @param tokenId1 ID/partition of the token2 (set to 0 bytes32 if price is set for all IDs/partitions).
     */
    getTokenPrice(
      tokenAddress1: string,
      tokenAddress2: string,
      tokenId1: string,
      tokenId2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Set price of a token.
     * @param newPrice New price of the token.
     * @param tokenAddress1 Address of the token to be priced.
     * @param tokenAddress2 Address of the token to pay for token1.
     * @param tokenId1 ID/partition of the token1 (set to 0 bytes32 if price is set for all IDs/partitions).
     * @param tokenId2 ID/partition of the token2 (set to 0 bytes32 if price is set for all IDs/partitions).
     */
    setTokenPrice: {
      (
        tokenAddress1: string,
        tokenAddress2: string,
        tokenId1: string,
        tokenId2: string,
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress1: string,
        tokenAddress2: string,
        tokenId1: string,
        tokenId2: string,
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress1: string,
        tokenAddress2: string,
        tokenId1: string,
        tokenId2: string,
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress1: string,
        tokenAddress2: string,
        tokenId1: string,
        tokenId2: string,
        newPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get amount of token2 to pay to acquire the token1.
     * @param index Index of the DVP request.
     */
    getPrice(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the trade.
     * @param index Index of the trade.
     */
    getTrade(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      holder1: string;
      holder2: string;
      executer: string;
      expirationDate: BN;
      settlementDate: BN;
      userTradeData1: {
        tokenAddress: string;
        tokenValue: BN;
        tokenId: string;
        tokenStandard: BN;
        accepted: boolean;
        approved: boolean;
        tradeType: BN;
      };
      userTradeData2: {
        tokenAddress: string;
        tokenValue: BN;
        tokenId: string;
        tokenStandard: BN;
        accepted: boolean;
        approved: boolean;
        tradeType: BN;
      };
      state: BN;
    }>;

    /**
     * Get the total number of requests in the DVP contract.
     */
    getNbTrades(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
