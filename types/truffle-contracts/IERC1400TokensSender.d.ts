/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERC1400TokensSenderContract
  extends Truffle.Contract<IERC1400TokensSenderInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IERC1400TokensSenderInstance>;
}

type AllEvents = never;

export interface IERC1400TokensSenderInstance extends Truffle.ContractInstance {
  canTransfer(
    payload: string,
    partition: string,
    operator: string,
    from: string,
    to: string,
    value: number | BN | string,
    data: string,
    operatorData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  tokensToTransfer: {
    (
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    canTransfer(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    tokensToTransfer: {
      (
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        payload: string,
        partition: string,
        operator: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
