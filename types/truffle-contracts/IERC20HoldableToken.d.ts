/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERC20HoldableTokenContract
  extends Truffle.Contract<IERC20HoldableTokenInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IERC20HoldableTokenInstance>;
}

export interface Approval {
  name: "Approval";
  args: {
    owner: string;
    spender: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface ExecutedHold {
  name: "ExecutedHold";
  args: {
    holdId: string;
    lockPreimage: string;
    recipient: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface NewHold {
  name: "NewHold";
  args: {
    holdId: string;
    recipient: string;
    notary: string;
    amount: BN;
    expirationDateTime: BN;
    lockHash: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
  };
}

export interface ReleaseHold {
  name: "ReleaseHold";
  args: {
    holdId: string;
    sender: string;
    0: string;
    1: string;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = Approval | ExecutedHold | NewHold | ReleaseHold | Transfer;

export interface IERC20HoldableTokenInstance extends Truffle.ContractInstance {
  /**
   * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
   */
  allowance(
    owner: string,
    spender: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
   */
  approve: {
    (
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the amount of tokens owned by `account`.
   */
  balanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the amount of tokens in existence.
   */
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
   */
  transfer: {
    (
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
   */
  transferFrom: {
    (
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string,
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
   * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
   * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
   * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
   * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
   * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
   */
  hold: {
    (
      recipient: string,
      notary: string,
      amount: number | BN | string,
      expirationDateTime: number | BN | string,
      lockHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      recipient: string,
      notary: string,
      amount: number | BN | string,
      expirationDateTime: number | BN | string,
      lockHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      recipient: string,
      notary: string,
      amount: number | BN | string,
      expirationDateTime: number | BN | string,
      lockHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string,
      notary: string,
      amount: number | BN | string,
      expirationDateTime: number | BN | string,
      lockHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  retrieveHoldData(
    holdId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    sender: string;
    recipient: string;
    notary: string;
    amount: BN;
    expirationDateTime: BN;
    secretHash: string;
    status: BN;
  }>;

  /**
   * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
   * @param holdId a unique identifier for the hold.
   */
  releaseHold: {
    (holdId: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(holdId: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Amount of tokens owned by an account that are held pending execution or release.
   * @param account owner of the tokens
   */
  holdBalanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Total amount of tokens owned by an account including all the held tokens pending execution or release.
   * @param account owner of the tokens
   */
  grossBalanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalSupplyOnHold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * @param holdId a unique identifier for the hold.
   */
  holdStatus(
    holdId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: string,
      spender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
     */
    approve: {
      (
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the amount of tokens owned by `account`.
     */
    balanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the amount of tokens in existence.
     */
    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transfer: {
      (
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
     */
    transferFrom: {
      (
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sender: string,
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold: {
      (
        recipient: string,
        notary: string,
        amount: number | BN | string,
        expirationDateTime: number | BN | string,
        lockHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        recipient: string,
        notary: string,
        amount: number | BN | string,
        expirationDateTime: number | BN | string,
        lockHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        recipient: string,
        notary: string,
        amount: number | BN | string,
        expirationDateTime: number | BN | string,
        lockHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        recipient: string,
        notary: string,
        amount: number | BN | string,
        expirationDateTime: number | BN | string,
        lockHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    retrieveHoldData(
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      sender: string;
      recipient: string;
      notary: string;
      amount: BN;
      expirationDateTime: BN;
      secretHash: string;
      status: BN;
    }>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold: {
      (holdId: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    holdBalanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    grossBalanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalSupplyOnHold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     */
    "executeHold(bytes32,bytes32)": {
      (
        holdId: string,
        lockPreimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        holdId: string,
        lockPreimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holdId: string,
        lockPreimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holdId: string,
        lockPreimage: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)": {
      (
        holdId: string,
        lockPreimage: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        holdId: string,
        lockPreimage: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holdId: string,
        lockPreimage: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holdId: string,
        lockPreimage: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)": {
      (holdId: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holdId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
