/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ERC1400TokensCheckerContract
  extends Truffle.Contract<ERC1400TokensCheckerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ERC1400TokensCheckerInstance>;
}

type AllEvents = never;

export interface ERC1400TokensCheckerInstance extends Truffle.ContractInstance {
  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
   * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
   * @param from Token holder.
   * @param operator The address performing the transfer.
   * @param operatorData Information attached to the transfer, by the operator (if any).
   * @param partition Name of the partition.
   * @param payload Payload of the initial transaction.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  canTransferByPartition(
    payload: string,
    partition: string,
    operator: string,
    from: string,
    to: string,
    value: number | BN | string,
    data: string,
    operatorData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string }>;

  methods: {
    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Know the reason on success or failure based on the EIP-1066 application-specific status codes.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operator The address performing the transfer.
     * @param operatorData Information attached to the transfer, by the operator (if any).
     * @param partition Name of the partition.
     * @param payload Payload of the initial transaction.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    canTransferByPartition(
      payload: string,
      partition: string,
      operator: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
