/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ERC1400Contract extends Truffle.Contract<ERC1400Instance> {
  "new"(
    name: string,
    symbol: string,
    granularity: number | BN | string,
    controllers: string[],
    defaultPartitions: string[],
    meta?: Truffle.TransactionDetails
  ): Promise<ERC1400Instance>;
}

export interface Approval {
  name: "Approval";
  args: {
    owner: string;
    spender: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface ApprovalByPartition {
  name: "ApprovalByPartition";
  args: {
    partition: string;
    owner: string;
    spender: string;
    value: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

export interface AuthorizedOperator {
  name: "AuthorizedOperator";
  args: {
    operator: string;
    tokenHolder: string;
    0: string;
    1: string;
  };
}

export interface AuthorizedOperatorByPartition {
  name: "AuthorizedOperatorByPartition";
  args: {
    partition: string;
    operator: string;
    tokenHolder: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface ChangedPartition {
  name: "ChangedPartition";
  args: {
    fromPartition: string;
    toPartition: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface DocumentRemoved {
  name: "DocumentRemoved";
  args: {
    name: string;
    uri: string;
    documentHash: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface DocumentUpdated {
  name: "DocumentUpdated";
  args: {
    name: string;
    uri: string;
    documentHash: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface Issued {
  name: "Issued";
  args: {
    operator: string;
    to: string;
    value: BN;
    data: string;
    0: string;
    1: string;
    2: BN;
    3: string;
  };
}

export interface IssuedByPartition {
  name: "IssuedByPartition";
  args: {
    partition: string;
    operator: string;
    to: string;
    value: BN;
    data: string;
    operatorData: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: string;
    5: string;
  };
}

export interface MinterAdded {
  name: "MinterAdded";
  args: {
    account: string;
    0: string;
  };
}

export interface MinterRemoved {
  name: "MinterRemoved";
  args: {
    account: string;
    0: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Redeemed {
  name: "Redeemed";
  args: {
    operator: string;
    from: string;
    value: BN;
    data: string;
    0: string;
    1: string;
    2: BN;
    3: string;
  };
}

export interface RedeemedByPartition {
  name: "RedeemedByPartition";
  args: {
    partition: string;
    operator: string;
    from: string;
    value: BN;
    operatorData: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

export interface RevokedOperator {
  name: "RevokedOperator";
  args: {
    operator: string;
    tokenHolder: string;
    0: string;
    1: string;
  };
}

export interface RevokedOperatorByPartition {
  name: "RevokedOperatorByPartition";
  args: {
    partition: string;
    operator: string;
    tokenHolder: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface TransferByPartition {
  name: "TransferByPartition";
  args: {
    fromPartition: string;
    operator: string;
    from: string;
    to: string;
    value: BN;
    data: string;
    operatorData: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: string;
    6: string;
  };
}

type AllEvents =
  | Approval
  | ApprovalByPartition
  | AuthorizedOperator
  | AuthorizedOperatorByPartition
  | ChangedPartition
  | DocumentRemoved
  | DocumentUpdated
  | Issued
  | IssuedByPartition
  | MinterAdded
  | MinterRemoved
  | OwnershipTransferred
  | Redeemed
  | RedeemedByPartition
  | RevokedOperator
  | RevokedOperatorByPartition
  | Transfer
  | TransferByPartition;

export interface ERC1400Instance extends Truffle.ContractInstance {
  addMinter: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canImplementInterfaceForAddress(
    interfaceHash: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  domainSeparator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  generateDomainSeparator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isMinter(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeMinter: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the total number of issued tokens.
   */
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Get the balance of the account with address 'tokenHolder'.
   * @param tokenHolder Address for which the balance is returned.
   */
  balanceOf(
    tokenHolder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Transfer token for a specified address.
   * @param to The address to transfer to.
   * @param value The value to be transferred.
   */
  transfer: {
    (
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Check the value of tokens that an owner allowed to a spender.
   * @param owner address The address which owns the funds.
   * @param spender address The address which will spend the funds.
   */
  allowance(
    owner: string,
    spender: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
   * @param spender The address which will spend the funds.
   * @param value The amount of tokens to be spent.
   */
  approve: {
    (
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfer tokens from one address to another.
   * @param from The address which you want to transfer tokens from.
   * @param to The address which you want to transfer to.
   * @param value The amount of tokens to be transferred.
   */
  transferFrom: {
    (
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Access a document associated with the token.
   * @param name Short name (represented as a bytes32) associated to the document.
   */
  getDocument(
    name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: BN }>;

  /**
   * Associate a document with the token.
   * @param documentHash Hash of the document [optional parameter].
   * @param name Short name (represented as a bytes32) associated to the document.
   * @param uri Document content.
   */
  setDocument: {
    (
      name: string,
      uri: string,
      documentHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      name: string,
      uri: string,
      documentHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      uri: string,
      documentHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      uri: string,
      documentHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeDocument: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAllDocuments(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  /**
   * Get balance of a tokenholder for a specific partition.
   * @param partition Name of the partition.
   * @param tokenHolder Address for which the balance is returned.
   */
  balanceOfByPartition(
    partition: string,
    tokenHolder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get partitions index of a tokenholder.
   * @param tokenHolder Address for which the partitions index are returned.
   */
  partitionsOf(
    tokenHolder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.
   * @param data Information attached to the transfer, by the token holder.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  transferWithData: {
    (
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.
   * @param data Information attached to the transfer, and intended for the token holder ('from').
   * @param from Token holder (or 'address(0)' to set from to 'msg.sender').
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  transferFromWithData: {
    (
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfer tokens from a specific partition.
   * @param data Information attached to the transfer, by the token holder.
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  transferByPartition: {
    (
      partition: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      partition: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfer tokens from a specific partition through an operator.
   * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
   * @param from Token holder.
   * @param operatorData Information attached to the transfer, by the operator.
   * @param partition Name of the partition.
   * @param to Token recipient.
   * @param value Number of tokens to transfer.
   */
  operatorTransferByPartition: {
    (
      partition: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      partition: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      from: string,
      to: string,
      value: number | BN | string,
      data: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.
   */
  isControllable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.
   * @param operator Address to set as an operator for 'msg.sender'.
   */
  authorizeOperator: {
    (operator: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.
   * @param operator Address to rescind as an operator for 'msg.sender'.
   */
  revokeOperator: {
    (operator: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set 'operator' as an operator for 'msg.sender' for a given partition.
   * @param operator Address to set as an operator for 'msg.sender'.
   * @param partition Name of the partition.
   */
  authorizeOperatorByPartition: {
    (
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.
   * @param operator Address to rescind as an operator on given partition for 'msg.sender'.
   * @param partition Name of the partition.
   */
  revokeOperatorByPartition: {
    (
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Indicate whether the operator address is an operator of the tokenHolder address.
   * @param operator Address which may be an operator of tokenHolder.
   * @param tokenHolder Address of a token holder which may have the operator address as an operator.
   */
  isOperator(
    operator: string,
    tokenHolder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Indicate whether the operator address is an operator of the tokenHolder address for the given partition.
   * @param operator Address which may be an operator of tokenHolder for the given partition.
   * @param partition Name of the partition.
   * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.
   */
  isOperatorForPartition(
    partition: string,
    operator: string,
    tokenHolder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Know if new tokens can be issued in the future.
   */
  isIssuable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Issue tokens from default partition.
   * @param data Information attached to the issuance, by the issuer.
   * @param tokenHolder Address for which we want to issue tokens.
   * @param value Number of tokens issued.
   */
  issue: {
    (
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Issue tokens from a specific partition.
   * @param data Information attached to the issuance, by the issuer.
   * @param partition Name of the partition.
   * @param tokenHolder Address for which we want to issue tokens.
   * @param value Number of tokens issued.
   */
  issueByPartition: {
    (
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Redeem the amount of tokens from the address 'msg.sender'.
   * @param data Information attached to the redemption, by the token holder.
   * @param value Number of tokens to redeem.
   */
  redeem: {
    (
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Redeem the amount of tokens on behalf of the address from.
   * @param data Information attached to the redemption.
   * @param from Token holder whose tokens will be redeemed (or address(0) to set from to msg.sender).
   * @param value Number of tokens to redeem.
   */
  redeemFrom: {
    (
      from: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Redeem tokens of a specific partition.
   * @param data Information attached to the redemption, by the redeemer.
   * @param partition Name of the partition.
   * @param value Number of tokens redeemed.
   */
  redeemByPartition: {
    (
      partition: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partition: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Redeem tokens of a specific partition.
   * @param operatorData Information attached to the redemption, by the operator.
   * @param partition Name of the partition.
   * @param tokenHolder Address for which we want to redeem tokens.
   * @param value Number of tokens redeemed
   */
  operatorRedeemByPartition: {
    (
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      tokenHolder: string,
      value: number | BN | string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the name of the token, e.g., "MyToken".
   */
  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Get the symbol of the token, e.g., "MYT".
   */
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Get the number of decimals of the token.
   */
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Get the smallest part of the token that’s not divisible.
   */
  granularity(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Get list of existing partitions.
   */
  totalPartitions(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  /**
   * Get the total number of issued tokens for a given partition.
   * @param partition Name of the partition.
   */
  totalSupplyByPartition(
    partition: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again.
   */
  renounceControl: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Definitely renounce the possibility to issue new tokens. Once set to false, '_isIssuable' can never be set to 'true' again.
   */
  renounceIssuance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Get the list of controllers as defined by the token contract.
   */
  controllers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  /**
   * Get controllers for a given partition.
   * @param partition Name of the partition.
   */
  controllersByPartition(
    partition: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Set list of token controllers.
   * @param operators Controller addresses.
   */
  setControllers: {
    (operators: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set list of token partition controllers.
   * @param operators Controller addresses.
   * @param partition Name of the partition.
   */
  setPartitionControllers: {
    (
      partition: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partition: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      operators: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32("unrestricted").
   */
  getDefaultPartitions(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Set default partitions to transfer from. Function used for ERC20 retrocompatibility.
   * @param partitions partitions to use by default when not specified.
   */
  setDefaultPartitions: {
    (partitions: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      partitions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partitions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partitions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Check the value of tokens that an owner allowed to a spender.
   * @param owner address The address which owns the funds.
   * @param partition Name of the partition.
   * @param spender address The address which will spend the funds.
   */
  allowanceByPartition(
    partition: string,
    owner: string,
    spender: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
   * @param partition Name of the partition.
   * @param spender The address which will spend the funds.
   * @param value The amount of tokens to be spent.
   */
  approveByPartition: {
    (
      partition: string,
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partition: string,
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      partition: string,
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partition: string,
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set token extension contract address. The extension contract can for example verify "ERC1400TokensValidator" or "ERC1400TokensChecker" interfaces. If the extension is an "ERC1400TokensValidator", it will be called everytime a transfer is executed.
   * @param addControllerRoleForExtension If set to 'true', the extension contract will be added as controller.
   * @param addMinterRoleForExtension If set to 'true', the extension contract will be added as minter.
   * @param extension Address of the extension contract.
   * @param interfaceLabel Interface label of extension contract.
   * @param removeOldExtensionRoles If set to 'true', the roles of the old extension(minter, controller) will be removed extension.
   */
  setTokenExtension: {
    (
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      extension: string,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again
   * @param definitive If set to 'true' the contract is turned off definitely.
   * @param newContractAddress Address of the new version of the smart contract.
   */
  migrate: {
    (
      newContractAddress: string,
      definitive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newContractAddress: string,
      definitive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newContractAddress: string,
      definitive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newContractAddress: string,
      definitive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  domainName(txDetails?: Truffle.TransactionDetails): Promise<string>;

  domainVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    addMinter: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    canImplementInterfaceForAddress(
      interfaceHash: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    domainSeparator: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    generateDomainSeparator(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isMinter(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    removeMinter: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceMinter: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the total number of issued tokens.
     */
    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Get the balance of the account with address 'tokenHolder'.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOf(
      tokenHolder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Transfer token for a specified address.
     * @param to The address to transfer to.
     * @param value The value to be transferred.
     */
    transfer: {
      (
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     */
    allowance(
      owner: string,
      spender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approve: {
      (
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfer tokens from one address to another.
     * @param from The address which you want to transfer tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     */
    transferFrom: {
      (
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Access a document associated with the token.
     * @param name Short name (represented as a bytes32) associated to the document.
     */
    getDocument(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: BN }>;

    /**
     * Associate a document with the token.
     * @param documentHash Hash of the document [optional parameter].
     * @param name Short name (represented as a bytes32) associated to the document.
     * @param uri Document content.
     */
    setDocument: {
      (
        name: string,
        uri: string,
        documentHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        name: string,
        uri: string,
        documentHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        name: string,
        uri: string,
        documentHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        uri: string,
        documentHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeDocument: {
      (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAllDocuments(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    /**
     * Get balance of a tokenholder for a specific partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which the balance is returned.
     */
    balanceOfByPartition(
      partition: string,
      tokenHolder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get partitions index of a tokenholder.
     * @param tokenHolder Address for which the partitions index are returned.
     */
    partitionsOf(
      tokenHolder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.
     * @param data Information attached to the transfer, by the token holder.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferWithData: {
      (
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.
     * @param data Information attached to the transfer, and intended for the token holder ('from').
     * @param from Token holder (or 'address(0)' to set from to 'msg.sender').
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferFromWithData: {
      (
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfer tokens from a specific partition.
     * @param data Information attached to the transfer, by the token holder.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    transferByPartition: {
      (
        partition: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        partition: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfer tokens from a specific partition through an operator.
     * @param data Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]
     * @param from Token holder.
     * @param operatorData Information attached to the transfer, by the operator.
     * @param partition Name of the partition.
     * @param to Token recipient.
     * @param value Number of tokens to transfer.
     */
    operatorTransferByPartition: {
      (
        partition: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        partition: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        from: string,
        to: string,
        value: number | BN | string,
        data: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.
     */
    isControllable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.
     * @param operator Address to set as an operator for 'msg.sender'.
     */
    authorizeOperator: {
      (operator: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator for 'msg.sender'.
     */
    revokeOperator: {
      (operator: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set 'operator' as an operator for 'msg.sender' for a given partition.
     * @param operator Address to set as an operator for 'msg.sender'.
     * @param partition Name of the partition.
     */
    authorizeOperatorByPartition: {
      (
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.
     * @param operator Address to rescind as an operator on given partition for 'msg.sender'.
     * @param partition Name of the partition.
     */
    revokeOperatorByPartition: {
      (
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        operator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address.
     * @param operator Address which may be an operator of tokenHolder.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator.
     */
    isOperator(
      operator: string,
      tokenHolder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Indicate whether the operator address is an operator of the tokenHolder address for the given partition.
     * @param operator Address which may be an operator of tokenHolder for the given partition.
     * @param partition Name of the partition.
     * @param tokenHolder Address of a token holder which may have the operator address as an operator for the given partition.
     */
    isOperatorForPartition(
      partition: string,
      operator: string,
      tokenHolder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Know if new tokens can be issued in the future.
     */
    isIssuable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Issue tokens from default partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issue: {
      (
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Issue tokens from a specific partition.
     * @param data Information attached to the issuance, by the issuer.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to issue tokens.
     * @param value Number of tokens issued.
     */
    issueByPartition: {
      (
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Redeem the amount of tokens from the address 'msg.sender'.
     * @param data Information attached to the redemption, by the token holder.
     * @param value Number of tokens to redeem.
     */
    redeem: {
      (
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Redeem the amount of tokens on behalf of the address from.
     * @param data Information attached to the redemption.
     * @param from Token holder whose tokens will be redeemed (or address(0) to set from to msg.sender).
     * @param value Number of tokens to redeem.
     */
    redeemFrom: {
      (
        from: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Redeem tokens of a specific partition.
     * @param data Information attached to the redemption, by the redeemer.
     * @param partition Name of the partition.
     * @param value Number of tokens redeemed.
     */
    redeemByPartition: {
      (
        partition: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partition: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Redeem tokens of a specific partition.
     * @param operatorData Information attached to the redemption, by the operator.
     * @param partition Name of the partition.
     * @param tokenHolder Address for which we want to redeem tokens.
     * @param value Number of tokens redeemed
     */
    operatorRedeemByPartition: {
      (
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        tokenHolder: string,
        value: number | BN | string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the name of the token, e.g., "MyToken".
     */
    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Get the symbol of the token, e.g., "MYT".
     */
    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Get the number of decimals of the token.
     */
    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Get the smallest part of the token that’s not divisible.
     */
    granularity(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Get list of existing partitions.
     */
    totalPartitions(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    /**
     * Get the total number of issued tokens for a given partition.
     * @param partition Name of the partition.
     */
    totalSupplyByPartition(
      partition: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again.
     */
    renounceControl: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Definitely renounce the possibility to issue new tokens. Once set to false, '_isIssuable' can never be set to 'true' again.
     */
    renounceIssuance: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Get the list of controllers as defined by the token contract.
     */
    controllers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    /**
     * Get controllers for a given partition.
     * @param partition Name of the partition.
     */
    controllersByPartition(
      partition: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Set list of token controllers.
     * @param operators Controller addresses.
     */
    setControllers: {
      (operators: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set list of token partition controllers.
     * @param operators Controller addresses.
     * @param partition Name of the partition.
     */
    setPartitionControllers: {
      (
        partition: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partition: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        operators: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32("unrestricted").
     */
    getDefaultPartitions(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Set default partitions to transfer from. Function used for ERC20 retrocompatibility.
     * @param partitions partitions to use by default when not specified.
     */
    setDefaultPartitions: {
      (partitions: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        partitions: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partitions: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partitions: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Check the value of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param partition Name of the partition.
     * @param spender address The address which will spend the funds.
     */
    allowanceByPartition(
      partition: string,
      owner: string,
      spender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.
     * @param partition Name of the partition.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    approveByPartition: {
      (
        partition: string,
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partition: string,
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        partition: string,
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partition: string,
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set token extension contract address. The extension contract can for example verify "ERC1400TokensValidator" or "ERC1400TokensChecker" interfaces. If the extension is an "ERC1400TokensValidator", it will be called everytime a transfer is executed.
     * @param addControllerRoleForExtension If set to 'true', the extension contract will be added as controller.
     * @param addMinterRoleForExtension If set to 'true', the extension contract will be added as minter.
     * @param extension Address of the extension contract.
     * @param interfaceLabel Interface label of extension contract.
     * @param removeOldExtensionRoles If set to 'true', the roles of the old extension(minter, controller) will be removed extension.
     */
    setTokenExtension: {
      (
        extension: string,
        interfaceLabel: string,
        removeOldExtensionRoles: boolean,
        addMinterRoleForExtension: boolean,
        addControllerRoleForExtension: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        extension: string,
        interfaceLabel: string,
        removeOldExtensionRoles: boolean,
        addMinterRoleForExtension: boolean,
        addControllerRoleForExtension: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        extension: string,
        interfaceLabel: string,
        removeOldExtensionRoles: boolean,
        addMinterRoleForExtension: boolean,
        addControllerRoleForExtension: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        extension: string,
        interfaceLabel: string,
        removeOldExtensionRoles: boolean,
        addMinterRoleForExtension: boolean,
        addControllerRoleForExtension: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again
     * @param definitive If set to 'true' the contract is turned off definitely.
     * @param newContractAddress Address of the new version of the smart contract.
     */
    migrate: {
      (
        newContractAddress: string,
        definitive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newContractAddress: string,
        definitive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newContractAddress: string,
        definitive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newContractAddress: string,
        definitive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    domainName(txDetails?: Truffle.TransactionDetails): Promise<string>;

    domainVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
